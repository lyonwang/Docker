    lua_package_path "/usr/local/openresty/site/lualib/resty/ipip/?.lua;;";
    init_by_lua_block {
      local ipip = require "resty.ipip.ipip"
      cjson = require "cjson"
      ipipc = ipip:new("97dc010a0793d97bad1a7d7eb98d5ab87ef0f8ee")

      -- IP 白名單與 IPIP IP地區資料庫黑名單
        -- 查詢 client IP 是否在 IP 白名單
      function checkIpWhiteList(ipaddr, data_path)
          local found = false
          if not data_path or not ipaddr then
              ngx.log(ngx.ERR, data_path)
              --ngx.say(data_path)
              return false
          end
          local ip1, ip2, ip3, ip4 = string.match(ipaddr, "(%d+).(%d+).(%d+).(%d+)")
          local ip_uint32 = ip1 * 256 ^ 3 + ip2 * 256 ^ 2 + ip3 * 256 + ip4
          --ngx.say(ip_uint32)
          local file, err = io.open(data_path, "r")
          if file == nil then
              ngx.log(ngx.ERR, data_path)
              --ngx.say(string.format("file is nill => %s", data_path))
              return false
          else
            for line in file:lines() do
              local f, t = line:match("(%d+),(%d+),(.*)")
              if ip_uint32 >= tonumber(f) and ip_uint32 <= tonumber(t) then
                found = true
                break
              end
            end          
            file:close()
          end
          return found
      end

      function checkRegionBlackList(ipaddr)
        local ipipc = ipipc
        local cjson = cjson
        -- 查詢 ipip 資料庫
        local res, err = ipipc:query_file(ipaddr)
        if res == nil then
          ngx.log(ngx.ERR, "ipipc:query_file("..ipaddr..") fail")
          return false, "ipipc:query_file("..ipaddr..") fail";
        else
          ngx.log(ngx.NOTICE, cjson.encode(res))
          ngx.log(ngx.NOTICE, string.format("clientIP: %s", ipaddr))
          ngx.log(ngx.NOTICE, string.format("country: %s", res["country"]))
          ngx.log(ngx.NOTICE, string.format("province: %s", res["province"]))
        end
        -- 取得地區黑名單
        local blist = {}
        local blist_file, err = io.open("/opt/nginx-admin/settings/region_blacklist.csv", "r")
        if blist_file == nil then
          ngx.log(ngx.ERR, "/opt/nginx-admin/settings/region_blacklist.csv")
        else
          list_cnt = 1
          for line in blist_file:lines() do
            blist[list_cnt] = {}
            local c, p = line:match("(.+),(.+)")
            blist[list_cnt]["country"] = c
            blist[list_cnt]["province"] = p
          end
          blist_file:close()
        end
        -- 檢查黑名單
        -- Blacklist: nation code(TW, HK, US, PH, SG)
        --if(
        --    ( res["country"] == "China" and res["province"] == "Taiwan" ) or  -- TW 61.218.9.191 (white: 61.218.9.190)
        --    ( res["country"] == "China" and res["province"] == "Hong" ) or  -- HK 
        --    ( res["country"] == "Philippines" and res["province"] == "Philippines" ) or  -- PH 
        --    ( res["country"] == "Singapore" and res["province"] == "Singapore" ) or  -- SG 27.111.224.1
        --    ( res["country"] == "United" and res["province"] == "States" ) -- US 23.100.122.175
        --  ) then
        for key, value in ipairs(blist) do
          if res["country"] == blist["country"] and res["province"] == blist["province"] then 
            return false, res
          end
        end
        return true, res
      end

      string.split = function(s, p)
          local rt= {}
          string.gsub(s, "[^"..p.."]+", function(w) table.insert(rt, w) end )
          return rt
      end

      function getClientIP(remoteIP, realIP, xForwardedFor)
          local retIP = remoteIP 
          if xForwardedFor then
            local iplist = string.split(xForwardedFor, ", ")
            if iplist[1] then
              retIP = iplist[1]
            end
          end
          if realIP then 
            retIP = realIP
          end
        return retIP
      end

      -- 跨來源資源共享 Cross-Origin Resource Sharing (CORS) 白名單
      function processCORS()
          varyHeaders = { "Origin", 
                          "Access-Control-Request-Method", 
                          "Access-Control-Request-Headers" }
          allowMethods = { "GET", 
                           "POST", 
                           "PUT", 
                           "DELETE", 
                           "OPTIONS" }
          allowHeaders = { "Accept", 
                           "Authorization", 
                           "Cache-Control", 
                           "Content-Type", 
                           "DNT", 
                           "If-Modified-Since", 
                           "Keep-Alive", 
                           "Origin", 
                           "User-Agent", 
                           "X-Requested-With", 
                           "X-Forwarded-For", 
                           "X-REQUEST-ID", 
                           "X-REQUEST-START-UTCTIME" }
          -- Response headers for CORS: Vary 表示要求客戶端要傳送給 Server 的 CORS Request headers
          ngx.header["Vary"] = table.concat(varyHeaders, ",")
          if (ngx.var.http_origin) then
            if (isInCORSList(ngx.var.http_origin)) then
              ngx.header["Access-Control-Allow-Origin"] = ngx.var.http_origin
              ngx.header["Access-Control-Allow-Credentials"] = "true"
              ngx.header["Access-Control-Allow-Methods"] = table.concat(allowMethods, ",")
              ngx.header["Access-Control-Allow-Headers"] = table.concat(allowHeaders, ",")
              if(ngx.var.request_method == "OPTIONS") then
                -- Tell client that this pre-flight info is valid for 20 days
                ngx.header["Access-Control-Max-Age"] = 1728000
                ngx.header["Content-Type"] = "text/plain charset=UTF-8"
                ngx.header["Content-Length"] = 0;
                ngx.exit(204);
              end
            end
          end
      end

      function trim(s)
        return (string.gsub(s, "^%s*(.-)%s*$", "%1"))
      end

      function string.startwith(String,Start)
        return string.sub(String,1,string.len(Start))==Start
      end

      function isInCORSList(origin)
        local cors_list = {}
        local cors_list_file, err = io.open("/opt/nginx-admin/settings/cors_allow.list", "r")
        if cors_list_file == nil then
          ngx.log(ngx.ERR, "/opt/nginx-admin/settings/cors_allow.list")
        else
          for line in cors_list_file:lines() do
            cors_list[table.getn(cors_list) + 1] = trim(line)
          end
          cors_list_file:close()
        end
        for key, value in ipairs(cors_list) do
          if origin:startwith("http://"..value) then 
            return true
          end
        end
        return false
      end
    }
    
    upstream 633_zeus {
        server 172.20.5.32:8004;
        server 172.20.5.33:8004;
        server 172.20.5.34:8004;
        #server 172.20.5.28:8004;
    }

    upstream 633_web {
        server 172.20.5.33:8084;
        server 172.20.5.32:8084;
        server 172.20.5.34:8084;
        #server 172.20.5.28:8084;
    }

    upstream letou_zeus {
        server 172.20.5.32:8005;
        server 172.20.5.33:8005;
        server 172.20.5.34:8005;
        #server 172.20.5.28:8005;
    }

    upstream letou_web {
        server 172.20.5.32:8085;
        server 172.20.5.33:8085;
        server 172.20.5.34:8085;
        #server 172.20.5.28:8085;
    }

    upstream pub_for_all {
        server 172.20.5.101:80;
    }

    upstream paymentsimulator {
        server 172.20.5.32:5000;
        server 172.20.5.33:5000;
        server 172.20.5.34:5000;
        #server 172.20.5.28:5000;
    }

    upstream paymentservicemaster {
        server 172.20.5.32:9150;
        server 172.20.5.33:9150;
        server 172.20.5.34:9150;
        #server 172.20.5.28:9150;
    }

    upstream paymentserviceinternal {
        server 172.20.5.32:9151;
        server 172.20.5.33:9151;
        server 172.20.5.34:9151;
        #server 172.20.5.28:9151;
    }

    upstream paymentserviceexternal {
        server 172.20.5.32:9152;
        server 172.20.5.33:9152;
        server 172.20.5.34:9152;
        #server 172.20.5.28:9152;
    }

    #upstream allbet {
    #    server 172.19.3.96:8101; # huayu local
    #}

    upstream billingservice {
        server 172.20.5.32:9090;
        server 172.20.5.33:9090;
        server 172.20.5.34:9090;
        #server 172.20.5.28:9090;
    }

    upstream apiconnections {
        server 172.20.5.32:8888;
        server 172.20.5.33:8888;
        server 172.20.5.34:8888;
        #server 172.20.5.28:8888;
    }

    upstream auth {
        server 172.20.5.32:9110;
        server 172.20.5.33:9110;
        server 172.20.5.34:9110;
        #server 172.20.5.28:9110;
    }

    upstream moneypay {
        server 172.19.3.99:4607;
    }

    upstream testnginx {
        server 172.19.3.79:8000;
    }

    server {
        listen 8777;

        charset utf-8;
        server_name 127.0.0.1 172.20.5.27 www.lyon.com www.lyon1.com;
        #default_type text/plain;
        #root /usr/local/openresty/nginx/html;

        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location /tracelog {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            echo "X-REQUEST-ID: $request_id, X-REQUEST-START-UTCTIME: $time_iso8601"
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }

        location /cors {
            access_by_lua_block {
                processCORS()
                ngx.say('<html><body><a href="http://www.lyon1.com:8000/cors1">To lyon1</a><img src="http://www.lyon.com:8000/image/logo.png" /></body></html>')
            }
        }

        location /test {
            set $clientIP $remote_addr;
            set $result "non";

            access_by_lua_block {
                ngx.var.clientIP = getClientIP(ngx.var.remote_addr, ngx.var.http_x_real_ip, ngx.var.http_x_forwarded_for)
                res, err = ipipc:query_file(ngx.var.clientIP)
                ngx.var.result = cjson.encode(res)
            }

            echo "clientIP: $clientIP, X-Forwarded-For: $http_x_forwarded_for, remote_addr: $remote_addr";
            echo $result;
        }

        location /ipcheck {
            set $a 1;

            # rewrite_by_lua also worked
            access_by_lua_block {
                ngx.var.clientIP = getClientIP(ngx.var.remote_addr, ngx.var.http_x_real_ip, ngx.var.http_x_forwarded_for)
                local is_pass = true
                is_black = checkRegionBlackList(ngx.var.clientIP)
                if is_black == true then
                is_white = checkIpWhiteList(ngx.var.clientIP, "/opt/nginx-admin/settings/ip_whitelist.csv")
                if not is_white then
                    is_pass = false
                end
                end
                if is_pass then
                ngx.var.a = "http://127.0.0.1:8000/pass"
                else
                ngx.var.a = "http://127.0.0.1:8000/access_denied"
                end
            }

            #echo $a;
            proxy_pass $a;
        }

        location /pass {
            echo "Pass";
        }

        location /access_denied {
            echo "Denied";
        }
    }

    server {
        listen 8999;
        server_name 172.20.5.31;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client
        
        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://testnginx/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 9110;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://auth/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 8888;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://apiconnections/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 9090;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://billingservice/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 5000;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://paymentsimulator/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 9150;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://paymentservicemaster/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 9151;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://paymentserviceinternal/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 9152;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://paymentserviceexternal/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }
    
    #skywind
    server {
        listen 8111;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://skywind/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    #allbet
    server {
        listen 8101;
        add_header X-REQUEST-ID $request_id;
   	add_header X-REQUEST-START-UTCTIME $time_iso8601;
	
	location / {
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_pass http://allbet/;
	    proxy_set_header X-REQUEST-ID $request_id;
	    proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601;
	}
    }

    server {
        listen 8304;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://moneypay/;
        }
    }

    server {
        listen 85;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location /api {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://letou_zeus/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }

        location /pub {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://pub_for_all/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://letou_web/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }

    server {
        listen 84;
        add_header X-REQUEST-ID $request_id; # Return to client
        add_header X-REQUEST-START-UTCTIME $time_iso8601; # Return to client

        location /api {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://633_zeus/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }

        # location /pub {
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_pass http://pub_for_all/;
        # }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://633_web/;
            proxy_set_header X-REQUEST-ID $request_id; # Pass to app server
            proxy_set_header X-REQUEST-START-UTCTIME $time_iso8601; # Pass to app server
        }
    }
